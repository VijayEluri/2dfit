(defun show-linear-ring (rest)
       (interactive "p")
       (let ((this-buffer (current-buffer)))
	 (write-linear-ring nil)
	 (switch-to-buffer "gnuplot")
	 (insert "plot \"C:\\\\linearring.dat\" with linespoints\n")
	 (comint-send-input )
	 (switch-to-buffer this-buffer)		   
	 )
       )

(defun write-linear-ring (rest)
  (interactive "i")
  (save-excursion 
    (search-forward "LINEARRING (")
    (let ((begin-point (point))
	  (this-buffer (current-buffer))
	  )
      (search-forward ")")
      (let ((end-point (point)))
	(let ((buffer-txt (buffer-substring-no-properties begin-point (- end-point 1))))
	  (let ((formatted-txt (replace-regexp-in-string "," "\n" buffer-txt)))
	    (let ((f-txt2 (replace-regexp-in-string "^ " "" formatted-txt)))
	      (write-region f-txt2 nil "C:\\linearring.dat")
	      ))
	  )
	)
      )
    )
  )


(defun show-multipolygon (show-linear-ring)
  (interactive "p")
  (save-excursion
    (search-forward "MULTIPOLYGON ")
    (let ((begin-point (point))
	  (this-buffer (current-buffer)))
      (search-forward "\n")
      (let ((end-point (point)))
	(let ((multi-txt (buffer-substring-no-properties begin-point (- end-point 1)))
	      (polynum 0)
	      (formatted-txt "")
	      (gnuplot-str "plot "))
	  (message "p1")
	  (goto-char (+ begin-point 1))
	  (while (search-forward "(" end-point t)
	    (let ((bp (point)))
	      (search-forward ")")
	      (let ((ep (point)))
		(setq formatted-txt (buffer-substring-no-properties (+ bp 1) (- ep 1)))
		(setq formatted-txt (replace-regexp-in-string "," "\n" formatted-txt))
	        (setq formatted-txt (replace-regexp-in-string "^ " "" formatted-txt))
		(write-region formatted-txt nil (format "C:\\multipoly%d.dat" polynum))
		;(message "txt %s" formatted-txt)
		(if (> polynum 0)
		    (setq gnuplot-str (concat gnuplot-str ","))
		  (setq gnuplot-str gnuplot-str)
		  )
		(setq gnuplot-str (concat gnuplot-str  (format "\"C:\\\\multipoly%d.dat\" with linespoints" polynum)))
		
		)
	      )
	    (setq polynum (+ polynum 1))
;	    (message "polynum %d" polynum)
	  )
	  (switch-to-buffer "gnuplot")
	  (if (eq show-linear-ring 1)
	      (setq gnuplot-str (concat gnuplot-str ", \"C:/linearring.dat\" with linespoints")) 
	    (setq gnuplot-str gnuplot-str)
	    )
	  (insert gnuplot-str)
	  (comint-send-input )
	  (switch-to-buffer this-buffer)		   
	  ;(message gnuplot-str)
	)
      )
    )
  )
)

(defun show-both (rest)
  (interactive "p")
  (save-excursion
    (write-linear-ring 1)
    (show-multipolygon 1)
    )
)